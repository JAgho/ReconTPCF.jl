var documenterSearchIndex = {"docs":
[{"location":"","page":"-","title":"-","text":"CurrentModule = ReconTPCF\r\nDocTestSetup = quote\r\n    using ReconTPCF\r\nend","category":"page"},{"location":"","page":"-","title":"-","text":"Modules = [ReconTPCF]","category":"page"},{"location":"#ReconTPCF.C2_initialise-Tuple{Any,Int64}","page":"-","title":"ReconTPCF.C2_initialise","text":"Compute the C2 count in an image. Serves as a starting point for a reconstruction\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.S2_finalise-Tuple{Any,Any,Any}","page":"-","title":"ReconTPCF.S2_finalise","text":"Normalise S2 count into S2 proper by dividing by BN and ϕ\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.S2_initialise-Tuple{Any,Any}","page":"-","title":"ReconTPCF.S2_initialise","text":"Find the S2 count for an image\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.blas_stat4-Tuple{Any,Float64,Any}","page":"-","title":"ReconTPCF.blas_stat4","text":"Computes a very fast multithreaded probabilistic S2 count. Employs kernel density estimation in place of a true histogram. Gives hilarious results when used for reconstruction.\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.blas_stat5-Tuple{Any,Any}","page":"-","title":"ReconTPCF.blas_stat5","text":"Compute the S2 count (multithreaded, O(N) memory)\n\nFor a list of N CartesianIndex tuples, compute and bin the L2 norm between all pixel pairs in the list.\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.blas_stat_st2-Tuple{Any,Float64,Any}","page":"-","title":"ReconTPCF.blas_stat_st2","text":"blas_stat_st2(indx, step, maxrng)\n\nFor a set of N points, compute the unique distance between all possible pairs of points. Bins distance measurements with a histogram of bin width step and length maxrng Single threaded implementation, greedy with memory. Good for smaller computations\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.check_edge-Tuple{Any,Any,Any}","page":"-","title":"ReconTPCF.check_edge","text":"Prevent fetch_locale from colliding with image edges by providing a reduced window if an edge is collided with\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.cluster_stat-Tuple{Any,Float64,Any}","page":"-","title":"ReconTPCF.cluster_stat","text":"Fast compution of S2 count for an array of arrays of cartesian indices. Multithreaded in the sense that\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.compute_change!-NTuple{5,Any}","page":"-","title":"ReconTPCF.compute_change!","text":"Sloppy computation to find the contribution to C2 count from the old state and the new, and hence the difference between them.\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.disk_strel-Tuple{Any}","page":"-","title":"ReconTPCF.disk_strel","text":"Compute a binary disk-shaped structure element given radius r on the basis of (areal) interpolation\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.fetch_locale-NTuple{5,Any}","page":"-","title":"ReconTPCF.fetch_locale","text":"Fetch the region around a pixel selection; give a reduced window if near an edge\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.find_equivalent-Tuple{Any,Any,Any}","page":"-","title":"ReconTPCF.find_equivalent","text":"Computes equivalent position of unique entry in a shortlist to an entry in a master list. Uses a much more sensible tupled pick\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.find_unique_regions-Tuple{Any}","page":"-","title":"ReconTPCF.find_unique_regions","text":"Examine which clusters are present in multiple windows simultaneously to determine which clusters are due to change from a pixel swap\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.fragment!-NTuple{5,Any}","page":"-","title":"ReconTPCF.fragment!","text":"Compute the L2 norm between points (xi, yi) and the arrays (arrx, arry) and write to preallocated array dist\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.get_clusters-NTuple{4,Any}","page":"-","title":"ReconTPCF.get_clusters","text":"Fuses clusters to reduce the scale of the problem\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.get_rand_pix-Tuple{Any}","page":"-","title":"ReconTPCF.get_rand_pix","text":"Select a random white and black pixel from a tupled pair of lists of cartesian coordinates\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.get_region_names-Tuple{Any}","page":"-","title":"ReconTPCF.get_region_names","text":"Find all unique values present in a small window into the region adjacent to a pixel selection. Used to interrogate a cluster labelled image\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.inner_blas2-Tuple{Array{Float32,1},Array{Float32,1},Array{Float32,1},UInt64}","page":"-","title":"ReconTPCF.inner_blas2","text":"inner_blas2(x, y, dist, len)\n\ncompute the lower triangular self-interaction matrix of a list of N items. gives a flat vector of F32, of length (N(N-1)/2). Interaction here is computing the L2 norm, but could be otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.loadim-Tuple{String}","page":"-","title":"ReconTPCF.loadim","text":"Loads and thresholds an image\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.make_rand_im-Tuple{Any,Any}","page":"-","title":"ReconTPCF.make_rand_im","text":"make_rand_im(philen, dims)\n\ncreate a random binary array of size dims with philen white pixels set within it. Also return a coordinate list for white and black pixels\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.monodisp_circ-Tuple{Any,Any,Any}","page":"-","title":"ReconTPCF.monodisp_circ","text":"Generate isotropically distributed circles that may overlap. Keep the implied phase fraction ϕ below 0.3 if possible\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.naninf-Tuple{Any}","page":"-","title":"ReconTPCF.naninf","text":"Eliminates NaN and Inf in an array\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.nonzero-Tuple{Any}","page":"-","title":"ReconTPCF.nonzero","text":"evaluate where an image is nonzero\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.pick_rand_coord-Tuple{Tuple{Array{CartesianIndex{2},1},Array{CartesianIndex{2},1}}}","page":"-","title":"ReconTPCF.pick_rand_coord","text":"Selects random elements in a pair of lists\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.pre_proc-Tuple{Any}","page":"-","title":"ReconTPCF.pre_proc","text":"pre_proc(Image::im)\n\nconvolve image with a disk-shaped structure element\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.subtract_cluster-Tuple{Any,Any}","page":"-","title":"ReconTPCF.subtract_cluster","text":"Deduct the contribution of a given set of pixels from a previously calculated S2 count\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.surf_opt-Tuple{Array{Bool,2}}","page":"-","title":"ReconTPCF.surf_opt","text":"Get list of all surface pixels from a 2d binary image using convolution to discriminate Sanitised version to prevent the function returning nothing\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.surf_opt2-Tuple{Array{Bool,2}}","page":"-","title":"ReconTPCF.surf_opt2","text":"Get list of all surface pixels from a 2d binary image using convolution to discriminate\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.surf_rand-Tuple{Any,Any}","page":"-","title":"ReconTPCF.surf_rand","text":"Find the intersection between two tupled lists of cartesian indices We use this to create a segment of a list that maintains ordering\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.swap_pix-NTuple{4,Any}","page":"-","title":"ReconTPCF.swap_pix","text":"Update tuple of 2 cartesian indices by swapping elements from each list at linear index wpick (for 1) and bpick (for 0)\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.update_C2_BN-Tuple{Any,Any,Array{Int64,2},Array{Int64,2},Any,Any,Any}","page":"-","title":"ReconTPCF.update_C2_BN","text":"Computes the C2 count change between a pair of images with one pixel swapped between them\n\n\n\n\n\n","category":"method"},{"location":"#ReconTPCF.update_S2_BN-NTuple{6,Any}","page":"-","title":"ReconTPCF.update_S2_BN","text":"Compute the update to S2 count. Find the contribution from all white pixel's distance from wpick and bpick, and the difference between them\n\n\n\n\n\n","category":"method"}]
}
